#!/usr/bin/env zsh
#
# Zsh Prezto Theme by PeRDy based on Garrett's one (https://github.com/chauncey-garrett/zsh-prompt-garrett)
# https://github.com/PeRDy/zsh-prompt-perdy
#

# Load dependencies.
pmodload 'helper'

# Truncate the PWD display, if needed.
function prompt_pwd {
  local pwd="${PWD/#$HOME/~}"

  # PWD will fit.
  if [[ "$pwd" == (#m)[/~] ]]; then
    prompt_current_dir="${prompt_color_pwd}$MATCH"
    unset MATCH

  # PWD needs truncation.
  else
    prompt_current_dir="${prompt_color_pwd}${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}/${pwd:t}"
  fi
}

# Notify of command completion after n seconds has passed.
function prompt_precmd_notification {

  # Trigger a notification after n seconds have elapsed.
  prompt_delay_after_notification=5

  # Determine time elapsed.
  prompt_precmd_time_elapsed_start=${prompt_preexec_time:-$(date +'%s')}
  prompt_precmd_time_elapsed_stop=$(date +'%s')
  let prompt_precmd_time_elapsed=$prompt_precmd_time_elapsed_stop-$prompt_precmd_time_elapsed_start

  # n seconds have passed, so notify!
  if [ $prompt_precmd_time_elapsed -gt $prompt_delay_after_notification ]; then

    # Notify via tput while on ssh.
    if [[ -n "$SSH_CLIENT" || -n "$SSH2_CLIENT" ]]; then
      tput bel

    # Use local notifications.
    else

      # On OS X, notify with terminal-notifier.
      if [[ "$OSTYPE" == darwin* ]] && (( $+commands[terminal-notifier] )); then
        terminal-notifier \
          -title "${prompt_preexec_cmd:-Unknown command}" \
          -message "Required $prompt_precmd_time_elapsed s" \
          -sound Tink

      # On OS X, notify with growlnotify.
      elif [[ "$OSTYPE" == darwin* ]] && (( $+commands[growlnotify] )); then
        growlnotify \
          -n "Terminal" \
          -t "${prompt_preexec_cmd:-Unknown command}" \
          -m "Required $prompt_precmd_time_elapsed s"

      # On linux, notify with notify-send.
      elif [[ "$OSTYPE" == linux-gnu ]] && (( $+commands[notify-send] )); then
        notify-send \
          "${prompt_preexec_cmd:-Unknown command}" \
          "Required $prompt_precmd_time_elapsed s"

      # Notify via tput.
      else
        tput bel
      fi
    fi
  fi
}

# A function executed whenever the directory is changed.
function prompt_chpwd {

  # List the contents of the new directory.
  if is-callable 'dircolors'; then

    # GNU flavor ls.
    if zstyle -t ':prezto:module:utility:ls' color; then
      ls --group-directories-first --color=auto
    else
      ls -F
    fi
  else

    # BSD flavor ls.
    if zstyle -t ':prezto:module:utility:ls' color; then
      ls -G
    else
      ls -F
    fi
  fi
}

# Functions called before command execution.
function prompt_preexec {

  # Define timer and command for notification.
  export prompt_preexec_time=$(date +'%s')
  export prompt_preexec_cmd="\$ $1"

  # Ensure terminal code isn't colored from prompt.
  print -n "$reset_color"
}

# Functions called before each prompt is displayed.
function prompt_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Show number of background jobs.
  prompt_number_jobs="%(1j.${prompt_color_prompt}J:${cyan}%j .)"

  # Format PWD.
  prompt_pwd

  # Trigger a notification after x time has elapsed.
  eval prompt_precmd_notification

  # Get Git repository info.
  if (( $+functions[git-info] )); then
    git-info
  fi

  # Get Python info.
  if (( $+functions[python-info] )); then
    python-info
  fi

  #
  # Report Git status
  #
  if [[ -n $git_info ]]; then
    local prompt_git="[ ${git_info[remote_status]}${git_info[prompt_info]}${git_info[local_status]}${git_info[sha]} ]"
  else
    local prompt_git=''
  fi

  #
  # Report Python virtualenv
  #
  if [[ -n $python_info ]]; then
    local prompt_python="[ $python_info[virtualenv] ]"
  else
    local prompt_python=''
  fi

  #
  # Add a line to prompt for visibility.
  #

  # Determine the width.
  local prompt_width_terminal
  (( prompt_width_terminal= ${COLUMNS} - 1 ))

  # Determine the length needed for prompt_space.
  # NOTE: Be sure not to include the ${(e)prompt_space} portion or it won't work.
  local prompt_line1="${prompt_upper_left_corner}${prompt_python}( ${prompt_current_dir} )${prompt_git}( ${prompt_location} )${prompt_upper_right_corner}"
  local zero='%([BSUbfksu]|([FB]|){*})'
  local prompt_width_line1=${#${(S%%)prompt_line1//$~zero/}}

  # Calculate the padding.
  local prompt_space_padding
  (( prompt_space_padding= ${prompt_width_terminal} - ${prompt_width_line1} ))

  # Add the correct number of characters.
  local prompt_space_character="${prompt_altchar_padding}"
  eval prompt_space="${prompt_color_prompt}\${(l.${prompt_space_padding}..${prompt_space_character}.)}"

  # Prompt line 1 (set above PROMPT, below).
  print -P '${prompt_altchar_enable}${prompt_color_prompt}${prompt_upper_left_corner}${prompt_python}( ${prompt_current_dir} ${prompt_color_prompt})${prompt_git}${prompt_altchar_enter}${(e)prompt_space}${prompt_altchar_leave}( ${prompt_location}${prompt_color_prompt} )${prompt_upper_right_corner}'
}

function prompt_user {
  # Root user.
  if [[ "$EUID" = "0" ]] || [[ "$USER" = 'root' ]]; then

    # Set colors.
    eval prompt_color_user=${3:-'${red}'}
    eval prompt_color_host=${3:-'${red}'}
    eval prompt_color_prompt=${3:-'${red}'}

    # Set style.
    eval prompt_user='%S${prompt_color_user}%n%s'
    eval prompt_host='${prompt_color_host}%m' # hostname up to first . (dot) (use %M for full hostname)
    eval prompt_location='${prompt_user}${cyan}@${prompt_host}' # user@host.name

  # On SSH.
  elif [[ -n "$SSH_CLIENT" || -n "$SSH2_CLIENT" ]]; then

    # Set colors.
    eval prompt_color_user=${3:-'${green}'}
    eval prompt_color_host=${3:-'${yellow}'}
    eval prompt_color_prompt=${3:-'${yellow}'}

    # Set style.
    eval prompt_user='%S${prompt_color_user}%n%s'
    eval prompt_host='${prompt_color_host}%m' # hostname up to first . (dot) (use %M for full hostname)
    eval prompt_location='${prompt_user}${cyan}@${prompt_host}' # user@host.name

  # Normal user.
  else

    # Set colors.
    eval prompt_color_user=${1:-'${green}'}
    eval prompt_color_host=${1:-'${green}'}
    eval prompt_color_prompt=${1:-'${grey}'}

    # Set style.
    eval prompt_user=''
    eval prompt_host='${prompt_color_host}%m' # hostname up to first . (dot) (use %M for full hostname)
    eval prompt_location='${prompt_user}${cyan}@${prompt_host}' # user@host.name
  fi

}

function prompt_prezto_style {
  #
  # Report git info.
  # NOTE: Listed in order in which the information will appear in the prompt.
  #

  # Git verbose data (commit counts, etc.)
  # zstyle ':prezto:module:git:info' verbose 'yes'

  # Git prompt info.
  zstyle ':prezto:module:git:info:branch'    format "${cyan}${prompt_color_prompt}:${green}%b"
  zstyle ':prezto:module:git:info:remote'    format ""
  zstyle ':prezto:module:git:info:action'    format "${yellow} %s"
  zstyle ':prezto:module:git:info:position'  format "${red} %p"

  # Git commit SHA.
  zstyle ':prezto:module:git:info:commit'    format "${yellow} %.7c${prompt_color_prompt}"

  # Git remote status.
  zstyle ':prezto:module:git:info:behind'    format "${magenta}⬇ "
  zstyle ':prezto:module:git:info:ahead'     format "${magenta}⬆ "
  zstyle ':prezto:module:git:info:diverged'  format "${magenta}⥮ "
  zstyle ':prezto:module:git:info:stashed'   format "${cyan}✭ "

  # Git local status.
  zstyle ':prezto:module:git:info:clean'     format ""
  zstyle ':prezto:module:git:info:dirty'     format "${prompt_color_prompt} | "
  zstyle ':prezto:module:git:info:added'     format "${green}✚"
  zstyle ':prezto:module:git:info:deleted'   format "${red}✗"
  zstyle ':prezto:module:git:info:modified'  format "${blue}✱"
  zstyle ':prezto:module:git:info:renamed'   format "${magenta}➜"
  zstyle ':prezto:module:git:info:unmerged'  format "${yellow}═"
  zstyle ':prezto:module:git:info:untracked' format "${white}◼"

  # Git prompt styles.
  zstyle ':prezto:module:git:info:keys' format \
    'prompt_info'    "%b" \
    'rprompt'        "%R" \
    'local_status'   "%C%D%a%d%m%r%U%u" \
    'remote_status'  "%B%A%S" \
    'sha'            "%c" \

  #
  # Report Python virtualenv
  #
  zstyle ':prezto:module:python:info:virtualenv' format "${yellow}ⓥ %v${prompt_color_prompt}"

  #
  # Command line editor info.
  #

  # Base style.
  zstyle ':prezto:module:editor:info:keymap:primary' format "${cyan}❱%(?.${prompt_color_prompt}.${red})❱❱ "

  # Vim insert mode.
  # zstyle ':prezto:module:editor:info:keymap:primary:insert' format "${red}I "

  # Vim overwrite mode.
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format "${red}♺ "

  # Vim normal (command) mode.
  zstyle ':prezto:module:editor:info:keymap:alternate' format "${cyan}❰%(?.${prompt_color_prompt}.${red})❰❰ "

  # Tab completion mode.
  zstyle ':prezto:module:editor:info:completing' format "${red}..."
}

# Configure the prompt.
function prompt_setup {

  # Load necessary modules.
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Add hooks for calling preexec, precmd & chpwd.
  autoload -Uz add-zsh-hook
  add-zsh-hook preexec prompt_preexec
  add-zsh-hook precmd prompt_precmd
  add-zsh-hook chpwd prompt_chpwd

  #
  # Colors
  #

  # Alias the colors.
  [[ -z $(functions colors) ]] && autoload -U colors && colors
  for color in black red green yellow blue magenta cyan white grey; do

    # Normal colors.
    eval $color='%F{${(L)color}}'

    # Bold colors.
    eval ${color}_bold='%B{${(L)color}}'
  done

  # Color scheme.
  eval prompt_color_pwd=\$\{${2:-'${blue}'}\}
  eval prompt_color_line_number=${5:-'${magenta}'}
  eval prompt_color_time=${6:-'${green}'}
  eval prompt_color_git_branch=${7:-'${green}'}
  eval prompt_color_git_sha=${8:-'${yellow}'}

  # Determine prompt, user and host colors.
  prompt_user
  
  # Report return code.
  eval prompt_return_code='%(?..${red}%? ⏎  ) '

  # Report local time.
  eval prompt_current_time='${green}%*'    # 24 hour time format, second precise
  # eval prompt_current_time='${green}%T'    # 24 hour time format
  # eval prompt_current_time='${green}%t'    # AM/PM time format

  # Report terminal line number.
  eval prompt_line_number='${green}+${magenta}%!'
  
  #
  # Use the extended character set, if available.
  #
  typeset -A altchar
  set -A altchar ${(s..)terminfo[acsc]}

  prompt_altchar_enable="%{$terminfo[enacs]%}"
  prompt_altchar_enter="%{$terminfo[smacs]%}"
  prompt_altchar_leave="%{$terminfo[rmacs]%}"

  # Character used to draw line.
  prompt_altchar_padding=${altchar[q]:--}

  # Upper left corner: ┌
  prompt_upper_left_corner=${prompt_altchar_enter}${altchar[l]:--}${altchar[q]:--}${prompt_altchar_leave}

  # Upper right corner: ┐
  prompt_upper_right_corner=${prompt_altchar_enter}${altchar[q]:--}${altchar[k]:--}${prompt_altchar_leave}

  # Lower left corner: └
  prompt_lower_left_corner=${prompt_altchar_enter}${altchar[m]:--}${altchar[q]:--}${prompt_altchar_leave}

  # Upper right corner: ┘
  prompt_lower_right_corner=${prompt_altchar_enter}${altchar[q]:--}${altchar[j]:--}${prompt_altchar_leave}

  # Define prezto style
  prompt_prezto_style

  #
  # Print out the prompt.
  #
  # Left prompt; base shell level.
  if (( $SHLVL == 1 )); then
    export PROMPT='${prompt_altchar_enable}${prompt_color_prompt}${prompt_lower_left_corner}${editor_info[keymap]}'

  # Left prompt; nested shell level.
  else
    export PROMPT='${prompt_color_prompt}${prompt_lower_left_corner}( ${cyan}$SHLVL ${prompt_color_prompt})${editor_info[keymap]}'
  fi

  # Right prompt.
  export RPROMPT='${editor_info[alternate]}${editor_info[overwrite]}${prompt_return_code}${prompt_number_jobs}${prompt_line_number} ${prompt_current_time} %(?.${prompt_color_prompt}.${red})❰${prompt_color_prompt}${prompt_lower_right_corner}'

  # Continuation prompt.
  export PROMPT2='(%_) ${editor_info[keymap]}'

  # Selection prompt.
  export PROMPT3='
(?) ${editor_info[keymap]}'

  # Execution trace prompt.
  export PROMPT4='${yellow}+${blue}%N ${green}@${magenta}%i ${reset_color}'

  # Autocorrection prompt.
  export SPROMPT='
${prompt_color_prompt}Correct ${red}%R${prompt_color_prompt} to ${green}%r${prompt_color_prompt} ? [nyae] '

  # Backup root prompt for Bash.
  # export SUDO_PS1="\[\u@\h\] \w \$ "
}

prompt_setup "$@"

